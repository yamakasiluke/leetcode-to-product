ListNode findFromEnd(ListNode head, int k) {
    ListNode p1 = head;
    // p1 先走 k 步
    for (int i = 0; i < k; i++) {
        p1 = p1.next;
    }
    ListNode p2 = head;
    // p1 和 p2 同时走 n - k 步
    while (p1 != null) {
        p2 = p2.next;
        p1 = p1.next;
    }
    // p2 现在指向第 n - k 个节点
    return p2;
}


ListNode f(ListNode head, int k){
    ListNode p1 = head;
    for(int i = 0; i < k; i++){
        p1 = p1.nexrt;
    }
    ListNode p2 = head;
    while(p1 != null){
        p2++
        p1++
    }
    return p2
}

public ListNode removeNthFromEnd(ListNode head, int n) {
    // 虚拟头节点
    ListNode dummy = new ListNode(-1);
    dummy.next = head;
    // 删除倒数第 n 个，要先找倒数第 n + 1 个节点
    ListNode x = findFromEnd(dummy, n + 1);
    // 删掉倒数第 n 个节点
    x.next = x.next.next;
    return dummy.next;
}

private ListNode findFromEnd(ListNode head, int k) {
    // 代码见上文
}


public ListNode removeFrom(ListNode head, int n){
    ListNode dummy = new ListNode(-1);
    dummy.next = head;
    ListNode x  f(dummy, n  + 1):
    x.next = x.next.next;
    reutrn dummy.next;
}