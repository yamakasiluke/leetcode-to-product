class Solution {
public:
    unordered_map <TreeNode*, int> f, g;

    void dfs(TreeNode* node) {
        if (!node) {
            return;
        }
        dfs(node->left);
        dfs(node->right);
        f[node] = node->val + g[node->left] + g[node->right];
        g[node] = max(f[node->left], g[node->left]) + max(f[node->right], g[node->right]);
    }

    int rob(TreeNode* root) {
        dfs(root);
        return max(f[root], g[root]);
    }
};

unordered_map<TreeNode*, int> f, g

void dfs(r){
    if(!r)
        return
    dfs(r->left);
    dfs(r->right);

    f[r] = node->val + g[r->left] + g[r->right]
    g[r] = max(f[r->left], g[r->left]) + max(f[r->left] , g[r->right])

}

int rob(r){
    dfs(r);
    return max(f[r], g[r])
}