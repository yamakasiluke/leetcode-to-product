// 记录最大深度
int res = 0;
int depth = 0;

// 主函数
int maxDepth(TreeNode root) {
    traverse(root);
    return res;
}

// 二叉树遍历框架
void traverse(TreeNode root) {
    if (root == null) {
        // 到达叶子节点
        res = Math.max(res, depth);
        return;
    }
    // 前序遍历位置
    depth++;
    traverse(root.left);
    traverse(root.right);
    // 后序遍历位置
    depth--;
}



int res;
int depth;

int d(TreeNode root){
    traverse(root);
    return res;
}   

void traverse(TreeNode root){
    if(root == null){
        res = Math.max(res, depth);
        return;
    }
    depth++
    traverse(root.left);
    traverse(root.right);
    depth--
}



// 定义：输入根节点，返回这棵二叉树的最大深度
int maxDepth(TreeNode root) {
    if (root == null) {
        return 0;
    }

    // 递归计算左右子树的最大深度
    int leftMax = maxDepth(root.left);
    int rightMax = maxDepth(root.right);
    // 整棵树的最大深度
    int res = Math.max(leftMax, rightMax) + 1;

    return res;
}



int maxDepth(TreeNode root){
    if(root == null){
        return 0;
    }
    int leftMax = maxDepth(root.left);
    int rightMax = maxDepth(root.right);
    int res = Math.max(leftMax, rightMax) + 1;
    return res;
}

int maxDepth(TreeNode root){
    if(root == null)
        return 0;
    int leftMax = maxDepth(root.left);
    int rightMax = maxDepth(root.right);
    int res = Math.max(leftMax, rightMax) + 1;
    return res;
}

/ 记录最大深度
int res = 0;
// 记录遍历到的节点的深度
int depth = 0;

// 主函数
int maxDepth(TreeNode root) {
    traverse(root);
    return res;
}

// 二叉树遍历框架
void traverse(TreeNode root) {
    if (root == null) {
        // 到达叶子节点，更新最大深度
        res = Math.max(res, depth);
        return;
    }
    // 前序位置
    depth++;
    traverse(root.left);
    traverse(root.right);
    // 后序位置
    depth--;
}
int res = 0;
int depth = 0;

int maxD(TreeNode root){
    traverse(root)
    return res
}

void traverse(TreeNode root){
    if(root == null){
        res = Math.max(res, depth);
        reutrn 
    }

    depth ++
    traverse(root.lertr)
    traverse(root.right)
    depth --
}


// 定义：输入根节点，返回这棵二叉树的最大深度
int maxDepth(TreeNode root) {
    if (root == null) {
        return 0;
    }
    // 利用定义，计算左右子树的最大深度
    int leftMax = maxDepth(root.left);
    int rightMax = maxDepth(root.right);
    // 整棵树的最大深度等于左右子树的最大深度取最大值，
    // 然后再加上根节点自己
    int res = Math.max(leftMax, rightMax) + 1;
    return res;
}

int maxD(TreeNode root){
    if(null){
        reruenr 0
    }

    int left = max(mroot.lerft);
    int right = max9root.right);


    int res = Math.max(left, right) + 1;
    return res;
}