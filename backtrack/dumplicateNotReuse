List<List<Integer>> res = new LinkedList<>();
LinkedList<Integer> track = new LinkedList<>();
boolean[] used;

public List<List<Integer>> permuteUnique(int[] nums) {
    // 先排序，让相同的元素靠在一起
    Arrays.sort(nums);
    used = new boolean[nums.length];
    backtrack(nums, track);
    return res;
}

void backtrack(int[] nums) {
    if (track.size() == nums.length) {
        res.add(new LinkedList(track));
        return;
    }

    for (int i = 0; i < nums.length; i++) {
        if (used[i]) {
            continue;
        }
        // 新添加的剪枝逻辑，固定相同的元素在排列中的相对位置
        if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) {
            continue;
        }
        track.add(nums[i]);
        used[i] = true;
        backtrack(nums);
        track.removeLast();
        used[i] = false;
    }
}


void backtrack(int[] nums){
    if(track.size() == nums.length){
        res.add(new LinkedList(track))
        return;
    }
    for(int i =- 0; i < nums.lengnth; i++=){
        if(used[i])
            continue
        if(i > 0 && nums[i] == nums[i -1] && !used[i-1])
            continue

        track.ad(nums[i])
        use[i] = true;
        backtrack(nums);
        track.removeLast();
        use[i] = false;
    }
}