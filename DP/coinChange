// 定义：输入金额 amount，返回凑出 amount 的最少硬币个数
int coinChange(int[] coins, int amount) {
    // base case
    if (amount == 0) return 0;
    if (amount < 0) return -1;

    int res = Integer.MAX_VALUE;
    for (int coin : coins) {
        // 递归计算凑出 amount - coin 的最少硬币个数
        int subProblem = coinChange(coins, amount - coin);
        if (subProblem == -1) continue;
        // 凑出 amount 的最少硬币个数
        res = Math.min(res, subProblem + 1);
    }

    return res == Integer.MAX_VALUE ? -1 : res;
}


int coinChange(int[] nums, int amount){
    if(amount == 0)
        return 0;
    if(amount < 0)
        return -1;
    int res = Integer.MAX_VALUE;
    for(int coin: coins){
        int sub = coinChange(coins, amount - coin);
        if(sub == -1){
            continue;
        }
        res = Math.min(res, 1 + sub);
    }
    return res == Integer.MAX_VALUE ? -1 : res;
}

int coinChange(int[] nums, int amount){
    if(amount == 0)
        return 0
    if(amount < 0)
        return -1;
    int res = Integer.MAX_VALUE;
    for(int coin: coins){
        int sub = coinChange(coins, amount - coin);
        if(sub == -1){
            continue;
        }
        res = Math.min(res, 1 + sub);
    }
    return res == Math.MAX_VALUE ? -1 : res;
}