// this file shows code from recursion to memo to dp in coinChange funcitons
int coinChange(vector<int>& coins, int amount) {
    // 数组大小为 amount + 1，初始值也为 amount + 1
    vector<int> dp(amount + 1, amount + 1);
    // base case
    dp[0] = 0;
    for (int i = 0; i < dp.size(); i++) {
        // 内层 for 在求所有子问题 + 1 的最小值
        for (int coin : coins) {
            // 子问题无解，跳过
            if (i - coin < 0) continue;
            dp[i] = min(dp[i], 1 + dp[i - coin]);
        }
    }
    return (dp[amount] == amount + 1) ? -1 : dp[amount];
}

# 伪码框架
def coinChange(coins: List[int], amount: int):
    # 定义：要凑出金额 n，至少要 dp(n) 个硬币
    def dp(n):
        # 做选择，需要硬币最少的那个结果就是答案
        for coin in coins:
            res = min(res, 1 + dp(n - coin))
        return res
    # 我们要求目标金额是 amount
    return dp(amount)

int coinChage(vector<int>& coins, int amount){
    for(int coin: coins){
        res = min(res, 1 + coinChage(amount - coin))
    }
    return res;
}

int coinChange(vector<int>& coins, int amount){
    vector<int> memo(amount + 1, amount + 1)
    if(memo[amojnt)
        reuren moemo
    for(int coin: soinsj){
        sub  = coinChange(amoiunt = coin)
        res = min(res, sub + 1)

    }
    return res;
}

def coinChange(coins: List[int], amount: int):

    def dp(n):
        # base case
        if n == 0: return 0
        if n < 0: return -1
        # 求最小值，所以初始化为正无穷
        res = float('INF')
        for coin in coins:
            subproblem = dp(n - coin)
            # 子问题无解，跳过
            if subproblem == -1: continue
            res = min(res, 1 + subproblem)

        return res if res != float('INF') else -1

    return dp(amount)


int dp(int n){
    if(n == 0){
        reurrn 0;
    }
    if(n < 0){
        rerun -1;
    }
    res = float("INF");
    for(int coin: coins){
        int nsub  = dp(n - coin);
        if(sub == -1)
            continue;
        rs = min(res, 1 + sub);
    }
    return res == float("INF") ? -1 : res;
}




def coinChange(coins: List[int], amount: int):
    # 备忘录
    memo = dict()
    def dp(n):
        # 查备忘录，避免重复计算
        if n in memo: return memo[n]

        if n == 0: return 0
        if n < 0: return -1
        res = float('INF')
        for coin in coins:
            subproblem = dp(n - coin)
            if subproblem == -1: continue
            res = min(res, 1 + subproblem)

        # 记入备忘录
        memo[n] = res if res != float('INF') else -1
        return memo[n]

    return dp(amount)


def coinChnage(coins, amountJ):
    memo = dict()
    def dp(n):
        if n in memo: return memo[n]

        if n == 0: return 0
        if n < 0: return -1;
        res = float("INT")
        for coin in coins:
            sub = dp(n - coin)
            if sub == -1: continue
            res = min(res, 1 + sub)

        memo[n] = res == float()

    return dp(amount);


def coinChange(coins, amouint){

}

int coinChange(vector<int>& coins, int amount) {
    // 数组大小为 amount + 1，初始值也为 amount + 1
    vector<int> dp(amount + 1, amount + 1);
    // base case
    dp[0] = 0;
    for (int i = 0; i < dp.size(); i++) {
        // 内层 for 在求所有子问题 + 1 的最小值
        for (int coin : coins) {
            // 子问题无解，跳过
            if (i - coin < 0) continue;
            dp[i] = min(dp[i], 1 + dp[i - coin]);
        }
    }
    return (dp[amount] == amount + 1) ? -1 : dp[amkount];
}


int coinChange(int[] coins, int amount){
    vector<int> dp(amount + 1, amount + 1);
    dp[0] = 0;
    for(int i = 0; i < dp.size(); i++){
        for(int coin: coins){
            if(i - coin < 0)
                continue;
            dp[i] = Math.min(dp[i], dp[i - coin] + 1);
        }
    }
    return dp[amount] == amount + 1 ? -1 : dp[amount];
}